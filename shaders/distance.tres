[gd_resource type="VisualShader" load_steps=17 format=2]

[sub_resource type="VisualShaderNodeTransformVecMult" id=1]

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "camera"

[sub_resource type="VisualShaderNodeTransformVecMult" id=3]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "camera"

[sub_resource type="VisualShaderNodeVectorOp" id=5]
operator = 1

[sub_resource type="VisualShaderNodeVec3Uniform" id=6]
uniform_name = "snake_head_pos"

[sub_resource type="VisualShaderNodeVectorLen" id=7]

[sub_resource type="VisualShaderNodeVectorOp" id=8]
operator = 3

[sub_resource type="VisualShaderNodeScalarConstant" id=9]
constant = 10.0

[sub_resource type="VisualShaderNodeVectorOp" id=10]
operator = 5

[sub_resource type="VisualShaderNodeScalarConstant" id=11]
constant = 3.0

[sub_resource type="VisualShaderNodeColorConstant" id=12]

[sub_resource type="VisualShaderNodeInput" id=13]
input_name = "vertex"

[sub_resource type="VisualShaderNodeScalarFunc" id=14]
function = 31

[sub_resource type="VisualShaderNodeScalarClamp" id=15]

[sub_resource type="VisualShaderNodeInput" id=16]
input_name = "vertex"

[resource]
code = "shader_type spatial;
render_mode cull_disabled, specular_disabled, unshaded, world_vertex_coords, shadows_disabled;

uniform vec3 snake_head_pos;



void vertex() {
// Input:2
	vec3 n_out2p0;
	n_out2p0 = VERTEX;

// Output:0
	VERTEX = n_out2p0;

}

void fragment() {
// Input:3
	vec3 n_out3p0;
	n_out3p0 = VERTEX;

// VectorUniform:2
	vec3 n_out2p0;
	n_out2p0 = snake_head_pos;

// VectorOp:18
	vec3 n_out18p0;
	n_out18p0 = n_out3p0 - n_out2p0;

// Scalar:26
	float n_out26p0;
	n_out26p0 = 10.000000;

// VectorOp:25
	vec3 n_out25p0;
	n_out25p0 = n_out18p0 / vec3(n_out26p0);

// Scalar:28
	float n_out28p0;
	n_out28p0 = 3.000000;

// VectorOp:27
	vec3 n_out27p0;
	n_out27p0 = pow( n_out25p0 , vec3(n_out28p0) );

// VectorLen:24
	float n_out24p0;
	n_out24p0 = length( n_out27p0 );

// ScalarClamp:31
	float n_in31p1 = 0.00000;
	float n_in31p2 = 1.00000;
	float n_out31p0;
	n_out31p0 = clamp( n_out24p0, n_in31p1, n_in31p2 );

// ScalarFunc:30
	float n_out30p0;
	n_out30p0 = 1.0-n_out31p0;

// Color:29
	vec3 n_out29p0;
	float n_out29p1;
	n_out29p0 = vec3(1.000000,1.000000,1.000000);
	n_out29p1 = 1.000000;

// Output:0
	ALPHA = n_out30p0;
	EMISSION = n_out29p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -93.1227, -169.615 )
modes/cull = 2
modes/specular = 4
flags/shadows_disabled = true
flags/unshaded = true
flags/world_vertex_coords = true
nodes/vertex/2/node = SubResource( 16 )
nodes/vertex/2/position = Vector2( 120, 160 )
nodes/vertex/connections = PoolIntArray( 2, 0, 0, 0 )
nodes/fragment/0/position = Vector2( 1140, -240 )
nodes/fragment/2/node = SubResource( 6 )
nodes/fragment/2/position = Vector2( -740, 200 )
nodes/fragment/3/node = SubResource( 13 )
nodes/fragment/3/position = Vector2( -720, -60 )
nodes/fragment/12/node = SubResource( 1 )
nodes/fragment/12/position = Vector2( -440, -140 )
nodes/fragment/13/node = SubResource( 2 )
nodes/fragment/13/position = Vector2( -720, -160 )
nodes/fragment/16/node = SubResource( 3 )
nodes/fragment/16/position = Vector2( -460, 60 )
nodes/fragment/17/node = SubResource( 4 )
nodes/fragment/17/position = Vector2( -760, 100 )
nodes/fragment/18/node = SubResource( 5 )
nodes/fragment/18/position = Vector2( -140, 0 )
nodes/fragment/24/node = SubResource( 7 )
nodes/fragment/24/position = Vector2( 420, -20 )
nodes/fragment/25/node = SubResource( 8 )
nodes/fragment/25/position = Vector2( 40, 40 )
nodes/fragment/26/node = SubResource( 9 )
nodes/fragment/26/position = Vector2( -200, 260 )
nodes/fragment/27/node = SubResource( 10 )
nodes/fragment/27/position = Vector2( 260, 0 )
nodes/fragment/28/node = SubResource( 11 )
nodes/fragment/28/position = Vector2( 80, 260 )
nodes/fragment/29/node = SubResource( 12 )
nodes/fragment/29/position = Vector2( 820, -240 )
nodes/fragment/30/node = SubResource( 14 )
nodes/fragment/30/position = Vector2( 800, 0 )
nodes/fragment/31/node = SubResource( 15 )
nodes/fragment/31/position = Vector2( 580, -40 )
nodes/fragment/connections = PoolIntArray( 27, 0, 24, 0, 24, 0, 31, 0, 31, 0, 30, 0, 28, 0, 27, 1, 13, 0, 12, 0, 3, 0, 12, 1, 2, 0, 16, 1, 17, 0, 16, 0, 18, 0, 25, 0, 3, 0, 18, 0, 2, 0, 18, 1, 26, 0, 25, 1, 25, 0, 27, 0, 30, 0, 0, 1, 29, 0, 0, 5 )
