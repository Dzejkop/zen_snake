[gd_resource type="VisualShader" load_steps=18 format=2]

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeVectorOp" id=11]

[sub_resource type="OpenSimplexNoise" id=12]

[sub_resource type="NoiseTexture" id=13]
seamless = true
noise = SubResource( 12 )

[sub_resource type="VisualShaderNodeTexture" id=14]
texture = SubResource( 13 )

[sub_resource type="VisualShaderNodeVectorOp" id=15]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=16]
constant = 0.01

[sub_resource type="VisualShaderNodeVectorOp" id=17]
default_input_values = [ 0, Vector3( 1, 1, 1 ), 1, Vector3( 0, 0, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=18]
constant = 10.0

[sub_resource type="VisualShaderNodeFresnel" id=1]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0, 0 ), 2, false, 3, 2.0 ]

[sub_resource type="VisualShaderNodeFresnel" id=2]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0, 0 ), 2, true, 3, 2.0 ]

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "normal"

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "view"

[sub_resource type="VisualShaderNodeScalarOp" id=5]

[sub_resource type="VisualShaderNodeColorUniform" id=6]
uniform_name = "color"

[sub_resource type="VisualShaderNodeVectorOp" id=7]
default_input_values = [ 0, Vector3( 1, 1, 1 ), 1, Vector3( 0, 0, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=10]
source = 1

[resource]
code = "shader_type spatial;
render_mode depth_test_disable;




void vertex() {
// Output:0

}

void fragment() {
// Input:4
	vec3 n_out4p0;
	n_out4p0 = NORMAL;

// Input:5
	vec3 n_out5p0;
	n_out5p0 = VIEW;

// Fresnel:2
	bool n_in2p2 = false;
	float n_in2p3 = 2.00000;
	float n_out2p0;
	n_out2p0 = n_in2p2 ? (pow(clamp(dot(n_out4p0, n_out5p0), 0.0, 1.0), n_in2p3)) : (pow(1.0 - clamp(dot(n_out4p0, n_out5p0), 0.0, 1.0), n_in2p3));
// ScalarOp:6
	float n_in6p1 = 0.00000;
	float n_out6p0;
	n_out6p0 = n_out2p0 + n_in6p1;

// VectorOp:8
	vec3 n_in8p0 = vec3(1.00000,1.00000,1.00000);
	vec3 n_out8p0;
	n_out8p0 = n_in8p0 * vec3(n_out6p0);

// Scalar:17
	float n_out17p0;
	n_out17p0 = 10.000000;

// VectorOp:16
	vec3 n_out16p0;
	n_out16p0 = n_out8p0 * vec3(n_out17p0);

// Output:0
	ALBEDO = n_out8p0;
	EMISSION = n_out16p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 8, 164.75 )
flags/depth_test_disable = true
nodes/fragment/0/position = Vector2( 1240, 180 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -220, 240 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -220, 400 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -480, 240 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( -480, 320 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( 272, 149.25 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( 180, 280 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( 640, 240 )
nodes/fragment/9/node = SubResource( 10 )
nodes/fragment/9/position = Vector2( 440, 0 )
nodes/fragment/10/node = SubResource( 8 )
nodes/fragment/10/position = Vector2( -100, -120 )
nodes/fragment/12/node = SubResource( 11 )
nodes/fragment/12/position = Vector2( 160, -40 )
nodes/fragment/13/node = SubResource( 14 )
nodes/fragment/13/position = Vector2( -460, -140 )
nodes/fragment/14/node = SubResource( 15 )
nodes/fragment/14/position = Vector2( -200, -20 )
nodes/fragment/15/node = SubResource( 16 )
nodes/fragment/15/position = Vector2( -500, 60 )
nodes/fragment/16/node = SubResource( 17 )
nodes/fragment/16/position = Vector2( 740, 380 )
nodes/fragment/17/node = SubResource( 18 )
nodes/fragment/17/position = Vector2( 520, 500 )
nodes/fragment/connections = PoolIntArray( 4, 0, 2, 0, 4, 0, 3, 0, 5, 0, 2, 1, 5, 0, 3, 1, 6, 0, 8, 1, 10, 0, 12, 0, 12, 0, 9, 0, 13, 0, 14, 0, 15, 0, 14, 1, 14, 0, 12, 1, 17, 0, 16, 1, 2, 0, 6, 0, 8, 0, 0, 0, 8, 0, 16, 0, 16, 0, 0, 5 )
