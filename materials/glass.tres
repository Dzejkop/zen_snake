[gd_resource type="ShaderMaterial" load_steps=14 format=2]

[sub_resource type="VisualShaderNodeScalarClamp" id=10]

[sub_resource type="VisualShaderNodeVectorInterp" id=11]

[sub_resource type="VisualShaderNodeTexture" id=1]
source = 1

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeVectorOp" id=4]

[sub_resource type="OpenSimplexNoise" id=5]

[sub_resource type="NoiseTexture" id=6]
noise = SubResource( 5 )

[sub_resource type="VisualShaderNodeTexture" id=7]
texture = SubResource( 6 )

[sub_resource type="VisualShaderNodeVectorOp" id=8]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=9]
constant = 0.025

[sub_resource type="VisualShaderNodeColorUniform" id=12]
uniform_name = "tint"

[sub_resource type="VisualShaderNodeScalarUniform" id=13]
uniform_name = "ref"

[sub_resource type="VisualShader" id=2]
code = "shader_type spatial;
uniform vec4 tint : hint_color;
uniform sampler2D tex_frg_5;uniform float ref;



void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:8
	vec3 n_out8p0;
	float n_out8p1;
	n_out8p0 = tint.rgb;
	n_out8p1 = tint.a;

// Input:3
	vec3 n_out3p0;
	n_out3p0 = vec3(SCREEN_UV,0.0);

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	vec4 tex_frg_5_read = texture( tex_frg_5 , UV.xy );
	n_out5p0 = tex_frg_5_read.rgb;
	n_out5p1 = tex_frg_5_read.a;

// Scalar:7
	float n_out7p0;
	n_out7p0 = 0.025000;

// VectorOp:6
	vec3 n_out6p0;
	n_out6p0 = n_out5p0 * vec3(n_out7p0);

// VectorOp:4
	vec3 n_out4p0;
	n_out4p0 = n_out3p0 + n_out6p0;

// Texture:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 _tex_read = textureLod( SCREEN_TEXTURE , n_out4p0.xy , 0.0 );
		n_out2p0 = _tex_read.rgb;
		n_out2p1 = _tex_read.a;
	}

// ScalarUniform:9
	float n_out9p0;
	n_out9p0 = ref;

// ScalarClamp:10
	float n_in10p1 = 0.00000;
	float n_in10p2 = 1.00000;
	float n_out10p0;
	n_out10p0 = clamp( n_out9p0, n_in10p1, n_in10p2 );

// VectorMix:15
	vec3 n_out15p0;
	n_out15p0 = mix( n_out8p0 , n_out2p0 , vec3(n_out10p0) );

// Output:0
	ALBEDO = n_out15p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -409, -259 )
nodes/fragment/0/position = Vector2( 840, 80 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 0, 140 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( -440, 120 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( -212, 170.5 )
nodes/fragment/5/node = SubResource( 7 )
nodes/fragment/5/position = Vector2( -520, 240 )
nodes/fragment/6/node = SubResource( 8 )
nodes/fragment/6/position = Vector2( -202, 331.5 )
nodes/fragment/7/node = SubResource( 9 )
nodes/fragment/7/position = Vector2( -243, 489.5 )
nodes/fragment/8/node = SubResource( 12 )
nodes/fragment/8/position = Vector2( 120, 20 )
nodes/fragment/9/node = SubResource( 13 )
nodes/fragment/9/position = Vector2( 0, 360 )
nodes/fragment/10/node = SubResource( 10 )
nodes/fragment/10/position = Vector2( 215, 363 )
nodes/fragment/15/node = SubResource( 11 )
nodes/fragment/15/position = Vector2( 540, 80 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 4, 0, 2, 0, 5, 0, 6, 0, 7, 0, 6, 1, 6, 0, 4, 1, 9, 0, 10, 0, 10, 0, 15, 2, 2, 0, 15, 1, 8, 0, 15, 0, 15, 0, 0, 0 )

[resource]
shader = SubResource( 2 )
shader_param/tint = Color( 1, 0.611765, 0.639216, 1 )
shader_param/ref = 0.1
